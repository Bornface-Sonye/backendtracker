# Generated by Django 4.2.7 on 2025-04-12 16:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tracker.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('year_id', models.AutoField(primary_key=True, serialize=False)),
                ('academic_year', models.CharField(help_text='Please Enter Academic Year', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ArchivedComplaint',
            fields=[
                ('complaint_code', models.CharField(help_text='Please Enter Complaint Code', max_length=100, primary_key=True, serialize=False, unique=True)),
                ('deleted_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('complaint_code', models.CharField(help_text='Please Enter Complaint Code', max_length=100, primary_key=True, serialize=False, unique=True)),
                ('missing_type', models.CharField(choices=[('CAT', 'CAT'), ('EXAM', 'EXAM'), ('BOTH', 'Both')], max_length=10)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_code', models.CharField(help_text='Please Enter Course Code', max_length=20, primary_key=True, serialize=False, unique=True)),
                ('course_name', models.CharField(help_text='Please Enter Course Name', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_code', models.CharField(help_text='Please Enter Department Code', max_length=20, primary_key=True, serialize=False, unique=True)),
                ('department_name', models.CharField(help_text='Please Enter Department Name', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('employee_no', models.CharField(help_text='Please Enter Lecturer Number', max_length=20, primary_key=True, serialize=False)),
                ('email_address', models.EmailField(help_text='Please Enter Lecturer Email Address', max_length=200)),
                ('username', models.EmailField(help_text='Enter a valid Username', max_length=200, unique=True)),
                ('first_name', models.CharField(help_text='Please Enter Student First Name', max_length=200)),
                ('last_name', models.CharField(help_text='Please Enter Student Last Name', max_length=200)),
                ('phone_number', models.CharField(help_text='Enter phone number in the format 0798073204 or +254798073404', max_length=13, validators=[tracker.validators.validate_kenyan_phone_number])),
                ('role', models.CharField(choices=[('Member', 'Member'), ('Exam Officer', 'Exam Officer'), ('COD', 'COD')], max_length=50)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.department')),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('program_code', models.CharField(help_text='Please Enter Program Code', max_length=10, primary_key=True, serialize=False)),
                ('program_name', models.CharField(help_text='Please Enter Program Name', max_length=255)),
                ('level', models.CharField(choices=[('Certificate', 'Certificate'), ('Diploma', 'Diploma'), ('Degree', 'Degree'), ('Masters', 'Masters'), ('PhD', 'PhD')], max_length=50)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.department')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_code', models.CharField(help_text='Please Enter School Code', max_length=20, primary_key=True, serialize=False, unique=True)),
                ('school_name', models.CharField(help_text='Please Enter School Name', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('semester_id', models.AutoField(primary_key=True, serialize=False)),
                ('semester_number', models.PositiveSmallIntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3')])),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.academicyear')),
            ],
        ),
        migrations.CreateModel(
            name='System_User',
            fields=[
                ('username', models.CharField(help_text='Enter a valid Username', max_length=50, primary_key=True, serialize=False, unique=True)),
                ('password_hash', models.CharField(help_text='Enter a valid password', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('unit_code', models.CharField(help_text='Please Enter Unit Code', max_length=20, primary_key=True, serialize=False, unique=True)),
                ('unit_name', models.CharField(help_text='Please Enter Unit Name', max_length=200)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.department')),
            ],
        ),
        migrations.CreateModel(
            name='YearOfStudy',
            fields=[
                ('study_year', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ArchivedResponse',
            fields=[
                ('archivedcomplaint', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tracker.archivedcomplaint')),
                ('cat_mark', models.IntegerField(blank=True, null=True)),
                ('exam_mark', models.IntegerField(blank=True, null=True)),
                ('response_date', models.DateTimeField(auto_now_add=True)),
                ('comment_by_cod', models.TextField(blank=True, null=True)),
                ('approved_by_cod', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('complaint', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tracker.complaint')),
                ('cat_mark', models.IntegerField(blank=True, null=True)),
                ('exam_mark', models.IntegerField(blank=True, null=True)),
                ('response_date', models.DateTimeField(auto_now_add=True)),
                ('comment_by_cod', models.TextField(blank=True, null=True)),
                ('approved_by_cod', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UnitOffering',
            fields=[
                ('offering_id', models.AutoField(primary_key=True, serialize=False)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.academicyear')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.course')),
                ('lecturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.lecturer')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.semester')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.unit')),
                ('year_of_study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.yearofstudy')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('reg_no', models.CharField(help_text='Please Enter Student Registration Number', max_length=200, primary_key=True, serialize=False, unique=True, validators=[tracker.validators.validate_reg_no])),
                ('username', models.CharField(help_text='Enter a valid Username', max_length=200, unique=True)),
                ('first_name', models.CharField(help_text='Please Enter Student First Name', max_length=200)),
                ('last_name', models.CharField(help_text='Please Enter Student Last Name', max_length=200)),
                ('email_address', models.EmailField(help_text='Please Enter Student Email Address', max_length=200)),
                ('phone_number', models.CharField(help_text='Enter phone number in the format 0798073204 or +254798073404', max_length=13, validators=[tracker.validators.validate_kenyan_phone_number])),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.course')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.program')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('exam', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(70)])),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.academicyear')),
                ('reg_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.student')),
                ('unit_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.unit')),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.system_user')),
            ],
        ),
        migrations.CreateModel(
            name='NominalRoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.academicyear')),
                ('reg_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.student')),
                ('unit_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.unit')),
            ],
        ),
        migrations.CreateModel(
            name='LecturerUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.academicyear')),
                ('course_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.course')),
                ('employee_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.lecturer')),
                ('unit_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.unit')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.school'),
        ),
        migrations.AddField(
            model_name='course',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.program'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='assigned_lecturer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_complaints', to='tracker.lecturer'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.student'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='unit_offering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.unitoffering'),
        ),
        migrations.AddField(
            model_name='archivedcomplaint',
            name='resolved_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracker.lecturer'),
        ),
        migrations.AddField(
            model_name='archivedcomplaint',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.student'),
        ),
        migrations.AddField(
            model_name='archivedcomplaint',
            name='unit_offering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.unitoffering'),
        ),
        migrations.AddConstraint(
            model_name='result',
            constraint=models.UniqueConstraint(fields=('unit_code', 'reg_no', 'academic_year'), name='unique_result_per_unit_student_year'),
        ),
        migrations.AddConstraint(
            model_name='nominalroll',
            constraint=models.UniqueConstraint(fields=('unit_code', 'reg_no', 'academic_year'), name='unique_nominal_roll_per_unit_student_year'),
        ),
    ]
